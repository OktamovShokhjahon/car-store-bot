const User = require("../models/User");
const CarApplication = require("../models/CarApplication");
const {
  createMainMenuKeyboard,
  createCancelKeyboard,
  createApplicationReviewKeyboard,
} = require("../utils/keyboards");

class UserHandlers {
  constructor(bot) {
    this.bot = bot;
    this.userStates = new Map();
    this.tempData = new Map();
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const user = msg.from;

    try {
      // Save or update user
      await User.findOneAndUpdate(
        { telegramId: user.id },
        {
          telegramId: user.id,
          username: user.username,
          firstName: user.first_name,
          lastName: user.last_name,
        },
        { upsert: true, new: true }
      );

      const welcomeMessage = `üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await this.bot.sendMessage(
        chatId,
        welcomeMessage,
        createMainMenuKeyboard()
      );
    } catch (error) {
      console.error("Error in handleStart:", error);
      await this.bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  async handleCarApplication(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    this.userStates.set(userId, "waiting_images");
    this.tempData.set(userId, {});

    await this.bot.sendMessage(
      chatId,
      "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–º–∞–∫—Å–∏–º—É–º 10). –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:",
      createCancelKeyboard()
    );
  }

  async handleTextInput(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (text === "‚ùå –û—Ç–º–µ–Ω–∞") {
      this.userStates.delete(userId);
      this.tempData.delete(userId);
      await this.bot.sendMessage(
        chatId,
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        createMainMenuKeyboard()
      );
      return;
    }

    const state = this.userStates.get(userId);
    const userData = this.tempData.get(userId) || {};

    if (!state) return;

    switch (state) {
      case "waiting_car_model":
        userData.carModel = text;
        this.userStates.set(userId, "waiting_price");
        this.tempData.set(userId, userData);
        await this.bot.sendMessage(chatId, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:");
        break;

      case "waiting_price":
        userData.price = text;
        this.userStates.set(userId, "waiting_car_year");
        this.tempData.set(userId, userData);
        await this.bot.sendMessage(
          chatId,
          "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
        );
        break;

      case "waiting_car_year":
        const year = parseInt(text);
        if (isNaN(year) || year < 1900 || year > new Date().getFullYear() + 1) {
          await this.bot.sendMessage(
            chatId,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024):"
          );
          return;
        }
        userData.carYear = year;
        this.userStates.set(userId, "waiting_mileage");
        this.tempData.set(userId, userData);
        await this.bot.sendMessage(chatId, "üõ£Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:");
        break;

      case "waiting_mileage":
        userData.mileage = text;
        this.userStates.set(userId, "waiting_vin");
        this.tempData.set(userId, userData);
        await this.bot.sendMessage(chatId, "üîë –í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:");
        break;

      case "waiting_vin":
        userData.vin = text;
        this.userStates.set(userId, "waiting_phone");
        this.tempData.set(userId, userData);
        await this.bot.sendMessage(
          chatId,
          "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
        );
        break;

      case "waiting_phone":
        userData.phoneNumber = text;
        this.userStates.set(userId, "waiting_location");
        this.tempData.set(userId, userData);
        await this.bot.sendMessage(
          chatId,
          "üåç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
        );
        break;

      case "waiting_location":
        userData.location = text;
        this.userStates.set(userId, "waiting_description");
        this.tempData.set(userId, userData);
        await this.bot.sendMessage(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:");
        break;

      case "waiting_description":
        userData.description = text;
        // After description, show application review
        await this.showApplicationReview(chatId, userId, userData);
        break;
    }
  }

  async handlePhoto(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const state = this.userStates.get(userId);

    if (state === "waiting_images") {
      const userData = this.tempData.get(userId) || {};
      if (!userData.images) userData.images = [];

      if (userData.images.length >= 10) {
        await this.bot.sendMessage(
          chatId,
          "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - 10. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        );
        return;
      }

      const photo = msg.photo[msg.photo.length - 1];
      userData.images.push(photo.file_id);
      this.tempData.set(userId, userData);

      await this.bot.sendMessage(
        chatId,
        `üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${userData.images.length}/10\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.`
      );
    }
  }

  async handleDone(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const state = this.userStates.get(userId);

    if (state === "waiting_images") {
      const userData = this.tempData.get(userId) || {};

      if (!userData.images || userData.images.length === 0) {
        await this.bot.sendMessage(
          chatId,
          "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
        );
        return;
      }

      // After images are done, ask for car model
      this.userStates.set(userId, "waiting_car_model");
      await this.bot.sendMessage(
        chatId,
        "üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
      );
    }
  }

  async showApplicationReview(chatId, userId, userData) {
    try {
      const reviewMessage = `üìã **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**

üì∏ **–§–æ—Ç–æ:** ${userData.images.length} —à—Ç.
üöó **–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:** ${userData.carModel}
üí∞ **–¶–µ–Ω–∞:** ${userData.price}
üìÖ **–ì–æ–¥:** ${userData.carYear}
üõ£Ô∏è **–ü—Ä–æ–±–µ–≥:** ${userData.mileage}
üîë **VIN:** ${userData.vin}
üì± **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** ${userData.phoneNumber}
üåç **–ú–µ—Å—Ç–æ –ø—Ä–æ–¥–∞–∂–∏:** ${userData.location}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${userData.description}

–í—Å—ë –≤–µ—Ä–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      // Send images with review message
      if (userData.images.length > 0) {
        const media = userData.images.map((imageId, idx) => {
          // Only the first photo gets the caption
          if (idx === 0) {
            return {
              type: "photo",
              media: imageId,
              caption: reviewMessage,
              parse_mode: "Markdown",
            };
          } else {
            return {
              type: "photo",
              media: imageId,
            };
          }
        });

        await this.bot.sendMediaGroup(chatId, media);
      }

      // Send action buttons
      await this.bot.sendMessage(
        chatId,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        createApplicationReviewKeyboard()
      );

      // Set state to waiting for user decision
      this.userStates.set(userId, "waiting_review_decision");
    } catch (error) {
      console.error("Error showing application review:", error);
      await this.bot.sendMessage(
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }

  async handleReviewDecision(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (text === "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É") {
      const userData = this.tempData.get(userId);
      if (userData) {
        await this.saveApplication(userId, chatId, userData);
      }
    } else if (text === "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å") {
      this.userStates.delete(userId);
      this.tempData.delete(userId);
      await this.bot.sendMessage(
        chatId,
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        createMainMenuKeyboard()
      );
    }
  }

  async saveApplication(userId, chatId, userData) {
    try {
      const user = await User.findOne({ telegramId: userId });

      const application = new CarApplication({
        userId: userId,
        userInfo: {
          telegramId: user.telegramId,
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
          phoneNumber: user.phoneNumber,
        },
        carModel: userData.carModel,
        carYear: userData.carYear,
        price: userData.price,
        mileage: userData.mileage,
        vin: userData.vin,
        phoneNumber: userData.phoneNumber,
        location: userData.location,
        description: userData.description,
        images: userData.images,
        status: "pending",
      });

      await application.save();

      // Clear user state
      this.userStates.delete(userId);
      this.tempData.delete(userId);

      const successMessage = `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
üì∏ –§–æ—Ç–æ: ${userData.images.length} —à—Ç.
üöó –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: ${userData.carModel}
üí∞ –¶–µ–Ω–∞: ${userData.price}
üìÖ –ì–æ–¥: ${userData.carYear}
üõ£Ô∏è –ü—Ä–æ–±–µ–≥: ${userData.mileage}
üîë VIN: ${userData.vin}
üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${userData.phoneNumber}
üåç –ú–µ—Å—Ç–æ –ø—Ä–æ–¥–∞–∂–∏: ${userData.location}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${userData.description}

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ—à–µ–Ω–∏–∏.`;

      await this.bot.sendMessage(
        chatId,
        successMessage,
        createMainMenuKeyboard()
      );

      // Send application to admin for review
      await this.sendApplicationToAdmin(application);
    } catch (error) {
      console.error("Error saving application:", error);
      await this.bot.sendMessage(
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }

  async sendApplicationToAdmin(application) {
    try {
      const adminId = 299720687; // Admin Telegram ID

      const adminMessage = `üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ê–°–°–ú–û–¢–†–ï–ù–ò–ï!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #${application._id}:
üì∏ –§–æ—Ç–æ: ${application.images.length} —à—Ç.
üöó –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: ${application.carModel}
üí∞ –¶–µ–Ω–∞: ${application.price}
üìÖ –ì–æ–¥: ${application.carYear}
üõ£Ô∏è –ü—Ä–æ–±–µ–≥: ${application.mileage}
üîë VIN: ${application.vin}
üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${application.phoneNumber}
üåç –ú–µ—Å—Ç–æ –ø—Ä–æ–¥–∞–∂–∏: ${application.location}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${application.description}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${application.userInfo.firstName} ${
        application.userInfo.lastName
      }
üì± Username: @${application.userInfo.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}
üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${application.createdAt.toLocaleDateString("ru-RU")}`;

      // Send images if available
      if (application.images.length > 0) {
        const media = application.images.map((imageId, idx) => {
          // Only the first photo gets the caption
          if (idx === 0) {
            return {
              type: "photo",
              media: imageId,
              caption: adminMessage,
            };
          } else {
            return {
              type: "photo",
              media: imageId,
            };
          }
        });

        await this.bot.sendMediaGroup(adminId, media);
      } else {
        await this.bot.sendMessage(adminId, adminMessage);
      }

      // Send approve/decline buttons
      const { createApplicationActionKeyboard } = require("../utils/keyboards");
      await this.bot.sendMessage(
        adminId,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        createApplicationActionKeyboard(application._id)
      );
    } catch (error) {
      console.error("Error sending application to admin:", error);
    }
  }

  async handleSupport(msg) {
    const chatId = msg.chat.id;
    await this.bot.sendMessage(
      chatId,
      "üìû –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é."
    );
  }
}

module.exports = UserHandlers;
